---
- hosts: etcd
  become: yes

  tasks:
    - name: Write etcd.service file
      copy:
        dest: /etc/systemd/system/etcd.service
        content: |
          [Unit]
          Description=etcd key-value store
          Documentation=https://github.com/etcd-io/etcd
          After=network.target

          [Service]
          ExecStart=/usr/local/bin/etcd --advertise-client-urls https://192.168.1.52:2379 --listen-client-urls https://192.168.1.52:2379,https://127.0.0.1:2379 --cert-file=/certs/server.pem --key-file=/certs/server-key.pem --client-cert-auth --trusted-ca-file=/certs/ca.pem
          Restart=always
          RestartSec=5
          LimitNOFILE=40000

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      notify: &restartEtcd
        - Reload systemd
        - Enable and restart etcd service

    - name: Ensure /etc/cfssl and /certs directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /etc/cfssl
        - /certs

    - name: Write ca-config.json
      copy:
        dest: /etc/cfssl/ca-config.json
        content: |
          {
            "signing": {
              "default": {
                "usages": ["signing", "key encipherment", "server auth", "client auth"],
                "expiry": "876000h"
              }
            }
          }
        mode: '0644'

    - name: Write ca-csr.json
      copy:
        dest: /etc/cfssl/ca-csr.json
        content: |
          {
            "CN": "Autogenerated CA",
            "key": {
              "algo": "rsa",
              "size": 2048
            },
            "names": [
              {
                "O": "Demo Org",
                "OU": "CA Division",
                "L": "San Francisco",
                "ST": "California",
                "C": "US"
              }
            ]
          }
        mode: '0644'

    - name: Write server-csr.json
      copy:
        dest: /etc/cfssl/server-csr.json
        content: |
          {
            "CN": "etcd-cluster",
            "hosts": ["localhost", "127.0.0.1", "192.168.1.52"],
            "key": {
              "algo": "ecdsa",
              "size": 256
            },
            "names": [
              {
                "C": "US",
                "L": "San Francisco",
                "ST": "California"
              }
            ]
          }
        mode: '0644'

    - name: Write client-csr.json
      copy:
        dest: /etc/cfssl/client-csr.json
        content: |
          {
            "CN": "client",
            "hosts": [""],
            "key": {
              "algo": "ecdsa",
              "size": 256
            },
            "names": [
              {
                "C": "US",
                "L": "San Francisco",
                "ST": "California"
              }
            ]
          }
        mode: '0644'

    - name: Check if certificates already exist
      stat:
        path: /certs/ca.pem
      register: cert_status

    - name: Generate TLS certificates (if not exist)
      shell: |
        cfssl gencert -initca /etc/cfssl/ca-csr.json | cfssljson -bare /certs/ca
        cfssl gencert -ca=/certs/ca.pem -ca-key=/certs/ca-key.pem -config=/etc/cfssl/ca-config.json /etc/cfssl/server-csr.json | cfssljson -bare /certs/server
        cfssl gencert -ca=/certs/ca.pem -ca-key=/certs/ca-key.pem -config=/etc/cfssl/ca-config.json /etc/cfssl/client-csr.json | cfssljson -bare /certs/client
      when: not cert_status.stat.exists
      notify: *restartEtcd

    - name: Download client certificates from remote to local machine
      fetch:
        src: "/certs/{{ item }}"
        dest: "../../../certs/{{ item }}"
        flat: yes
      loop:
        - client-key.pem
        - client.pem
        - ca.pem
      when: not cert_status.stat.exists
      notify: *restartEtcd

    - name: Check the installed version of etcd
      shell: |
        /usr/local/bin/etcd --version | grep -oP '(?<=etcd Version: ).*'
      register: installed_version
      ignore_errors: yes
      changed_when: false

    - name: Get the latest etcd version from GitHub
      shell: |
        curl -s https://api.github.com/repos/etcd-io/etcd/releases/latest | grep tag_name | cut -d '"' -f 4 | sed 's/^v//'
      register: etcd_version
      changed_when: false

    - name: Compare installed and latest version
      debug:
        msg: "Installed etcd version: {{ installed_version.stdout }}, Latest version: {{ etcd_version.stdout }}"

    - name: Notify if there is a new etcd version
      debug:
        msg: "A new etcd version ({{ etcd_version.stdout }}) is available! The currently installed version is {{ installed_version.stdout }}."
      when: installed_version.stdout != etcd_version.stdout
      notify: *restartEtcd

    - name: Download etcd if new version is available
      get_url:
        url: "https://github.com/etcd-io/etcd/releases/download/v{{ etcd_version.stdout }}/etcd-v{{ etcd_version.stdout }}-linux-amd64.tar.gz"
        dest: /tmp/etcd.tar.gz
      when: installed_version.stdout != etcd_version.stdout
      notify: *restartEtcd

    - name: Extract etcd binaries to /tmp if new version is available
      unarchive:
        src: /tmp/etcd.tar.gz
        dest: /tmp/
        remote_src: yes
        creates: /tmp/etcd-v{{ etcd_version.stdout }}-linux-amd64
      when: installed_version.stdout != etcd_version.stdout
      notify: *restartEtcd

    - name: Move etcd binaries to /usr/local/bin if new version is available
      shell: |
        mv /tmp/etcd-v{{ etcd_version.stdout }}-linux-amd64/etcd /usr/local/bin/etcd
        mv /tmp/etcd-v{{ etcd_version.stdout }}-linux-amd64/etcdctl /usr/local/bin/etcdctl
      when: installed_version.stdout != etcd_version.stdout
      notify: *restartEtcd

    - name: Clean up etcd temporary files
      shell: |
        rm -rf /tmp/etcd.tar.gz /tmp/etcd-v{{ etcd_version.stdout }}-linux-amd64
      when: installed_version.stdout != etcd_version.stdout
      notify: *restartEtcd

  handlers:
    - name: Reload systemd
      command: systemctl daemon-reload

    - name: Enable and restart etcd service
      systemd:
        name: etcd
        enabled: yes
        state: restarted
