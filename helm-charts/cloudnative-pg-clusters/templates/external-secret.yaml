{{- range $k, $clusterConfig := .Values.clusters }}

{{- $database := "app" }}
{{- $username := "app" }}
{{- if and $clusterConfig.bootstrap $clusterConfig.bootstrap.initdb }}
  {{- if $clusterConfig.bootstrap.initdb.database }}
    {{- $database = $clusterConfig.bootstrap.initdb.database }}
  {{- end }}
  {{- if $clusterConfig.bootstrap.initdb.owner }}
    {{- $username = $clusterConfig.bootstrap.initdb.owner }}
  {{- end }}
{{- else if and $clusterConfig.bootstrap $clusterConfig.bootstrap.recovery }}
  {{- if $clusterConfig.bootstrap.recovery.database }}
    {{- $database = $clusterConfig.bootstrap.recovery.database }}
  {{- end }}
  {{- if $clusterConfig.bootstrap.recovery.owner }}
    {{- $username = $clusterConfig.bootstrap.recovery.owner }}
  {{- end }}
{{- end }}

{{- $host := printf "%s-rw.%s" $clusterConfig.clusterName $clusterConfig.namespace }}
{{- $port := $clusterConfig.port | default 5432 }}
{{- $sslParams := "sslmode=verify-full&sslrootcert=/etc/secrets/ca/ca.crt" }}
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: {{ $clusterConfig.clusterName }}
  namespace: {{ $clusterConfig.namespace }}
spec:
  refreshInterval: "24h" # How often to rotate the database password
  target:
    name: {{ $clusterConfig.clusterName }}
    creationPolicy: Owner
    template:
      metadata:
        labels:
          cnpg.io/reload: "true"
      engineVersion: v2
      data:
        {{- /* required by clusters.postgresql.cnpg.io custom resource for bootstraping */}}
        username: "{{ $username }}"
        password: "{{ `{{ .password }}` }}"
        {{- /* generic env variables */}}
        DATABASE_URL: "postgresql://{{ $username }}:{{ `{{ .password }}` }}@{{ $host }}:{{ $port }}/{{ $database }}?{{ $sslParams }}"
        DATABASE_USER: "{{ $username }}"
        DATABASE_PASS: "{{ `{{ .password }}` }}"
        DATABASE_NAME: "{{ $database }}"
        DATABASE_HOST: "{{ $host }}"
        DATABASE_PORT: "{{ $port }}"
  dataFrom:
    - sourceRef:
        generatorRef:
          apiVersion: generators.external-secrets.io/v1alpha1
          kind: Password
          name: {{ $clusterConfig.clusterName }}
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: b2-backup-credentials
  namespace: {{ $clusterConfig.namespace }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword-secret-store
  target:
    creationPolicy: Owner
  data:
    - secretKey: AWS_ACCESS_KEY_ID
      remoteRef:
        conversionStrategy: Default
        decodingStrategy: None
        key: b2-secret-cloudnative-pg
        metadataPolicy: None
        property: AWS_ACCESS_KEY_ID
    - secretKey: AWS_SECRET_ACCESS_KEY
      remoteRef:
        conversionStrategy: Default
        decodingStrategy: None
        key: b2-secret-cloudnative-pg
        metadataPolicy: None
        property: AWS_SECRET_ACCESS_KEY
{{- end }}
